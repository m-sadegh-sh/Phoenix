<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssignedBy" xml:space="preserve">
    <value>Assigned By</value>
  </data>
  <data name="CategoryName" xml:space="preserve">
    <value>Category Name</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Build your queries by our Advanced/Multi-level searching service, then print generated reports simply.</value>
  </data>
  <data name="FromAmount" xml:space="preserve">
    <value>From Amount</value>
  </data>
  <data name="FromDate" xml:space="preserve">
    <value>From Date</value>
  </data>
  <data name="FromNo" xml:space="preserve">
    <value>From No</value>
  </data>
  <data name="FromPlaque" xml:space="preserve">
    <value>From Plaque</value>
  </data>
  <data name="InItems" xml:space="preserve">
    <value>Search in Items</value>
  </data>
  <data name="InItemsByLowestAmount" xml:space="preserve">
    <value>By Lowest Valid Amount</value>
  </data>
  <data name="InItemsByName" xml:space="preserve">
    <value>By Item Name</value>
  </data>
  <data name="InItemsByRegisterDate" xml:space="preserve">
    <value>By Register Date</value>
  </data>
  <data name="InLabProps" xml:space="preserve">
    <value>Search in Laboratories Properties</value>
  </data>
  <data name="InLabPropsByAssignDate" xml:space="preserve">
    <value>By Assign Date</value>
  </data>
  <data name="InLabPropsByLabName" xml:space="preserve">
    <value>By Laboratory Name</value>
  </data>
  <data name="InLabs" xml:space="preserve">
    <value>Search in Laboratories</value>
  </data>
  <data name="InLabsByName" xml:space="preserve">
    <value>By Laboratory Name</value>
  </data>
  <data name="InLabsByPlaqueNo" xml:space="preserve">
    <value>By Laboratory Plaque No</value>
  </data>
  <data name="InLabsByRegisterDate" xml:space="preserve">
    <value>By Laboratory Register Date</value>
  </data>
  <data name="InLogs" xml:space="preserve">
    <value>Search in Logs</value>
  </data>
  <data name="InLogsByLogDate" xml:space="preserve">
    <value>By Log Date</value>
  </data>
  <data name="InLogsByUserName" xml:space="preserve">
    <value>By User Name</value>
  </data>
  <data name="InMaterials" xml:space="preserve">
    <value>Search in Materials</value>
  </data>
  <data name="InMaterialsByCategoryName" xml:space="preserve">
    <value>By Category Name</value>
  </data>
  <data name="InMaterialsByLowestAmount" xml:space="preserve">
    <value>By Minimum Lowest Amount</value>
  </data>
  <data name="InMaterialsByName" xml:space="preserve">
    <value>By Material Name</value>
  </data>
  <data name="InMaterialsByRegisterDate" xml:space="preserve">
    <value>By Register Date</value>
  </data>
  <data name="InProps" xml:space="preserve">
    <value>Search in Properties</value>
  </data>
  <data name="InPropsByCategoryName" xml:space="preserve">
    <value>By Category Name</value>
  </data>
  <data name="InPropsByName" xml:space="preserve">
    <value>By Property Name</value>
  </data>
  <data name="InPropsByPropNo" xml:space="preserve">
    <value>By Property No</value>
  </data>
  <data name="InPropsByPropStatus" xml:space="preserve">
    <value>By Property Status</value>
  </data>
  <data name="InPropsByRegisterDate" xml:space="preserve">
    <value>By Register Date</value>
  </data>
  <data name="InRepositoryItems" xml:space="preserve">
    <value>Search in Allocated Items</value>
  </data>
  <data name="InRepositoryItemsByAmount" xml:space="preserve">
    <value>By Requested Amount</value>
  </data>
  <data name="InRepositoryItemsByRegisterDate" xml:space="preserve">
    <value>By Allocation/Return Date</value>
  </data>
  <data name="InRepositoryItemsByTarget" xml:space="preserve">
    <value>By Deliverer/Transferee Name</value>
  </data>
  <data name="InRepositoryItemsByUserName" xml:space="preserve">
    <value>By Username</value>
  </data>
  <data name="InRepositoryMaterials" xml:space="preserve">
    <value>Search in Repository Materials</value>
  </data>
  <data name="InRepositoryMaterialsByAmount" xml:space="preserve">
    <value>By Amount</value>
  </data>
  <data name="InRepositoryMaterialsByRegisterDate" xml:space="preserve">
    <value>By Allocation/Return Date</value>
  </data>
  <data name="InRepositoryMaterialsByTarget" xml:space="preserve">
    <value>By Deliverer/Transferee Name</value>
  </data>
  <data name="InRepositoryMaterialsByUserName" xml:space="preserve">
    <value>By User Name</value>
  </data>
  <data name="InValidLowerBoundDate" xml:space="preserve">
    <value>Start date is invalid.</value>
  </data>
  <data name="InValidUpperBoundDate" xml:space="preserve">
    <value>End date is invalid.</value>
  </data>
  <data name="LowerBoundIsGreaterThanOfUpperBound" xml:space="preserve">
    <value>Specified range is invalid.</value>
  </data>
  <data name="MaterialName" xml:space="preserve">
    <value>Material Name</value>
  </data>
  <data name="Outside" xml:space="preserve">
    <value>Outside of specified bounds</value>
  </data>
  <data name="PropName" xml:space="preserve">
    <value>Property Name</value>
  </data>
  <data name="PropStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="TargetName" xml:space="preserve">
    <value>Deliverer/Transferee Name</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="ToAmount" xml:space="preserve">
    <value>To Amount</value>
  </data>
  <data name="ToDate" xml:space="preserve">
    <value>To Date</value>
  </data>
  <data name="ToNo" xml:space="preserve">
    <value>To No</value>
  </data>
  <data name="ToPlaque" xml:space="preserve">
    <value>To Plaque</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
</root>